{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"warrior-bot","text":"<p>Terminal assistant for Wayne State University students.</p>"},{"location":"#welcome","title":"Welcome!","text":"<p>If you're here to contribute, skip ahead to Getting Started. If you just want to try it out, follow the steps below!</p>"},{"location":"#installation","title":"Installation","text":"<p>For now, install and run the program using the following command from the root directory. We hope to come out with our pilot version in the near future which will give you access via <code>pip</code>, <code>uv</code> and <code>poetry</code>.</p> <pre><code>pip install -e .\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<pre><code>warrior-bot where is panda express\nwarrior-bot what is the wifi name\nwarrior-bot --help\n</code></pre>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.10+</li> <li>Access to a terminal</li> <li>Recommended<ul> <li>Ghostty</li> <li>Alacritty</li> <li>Kitty</li> <li>WezTerm</li> </ul> </li> </ul> <p>If you're on MacOS, we also recommend iTerm2</p>"},{"location":"#development","title":"Development","text":""},{"location":"#getting-started","title":"Getting Started","text":"<p>Read the Contribution Setup and Guidelines to get started.</p>"},{"location":"#quick-setup","title":"Quick Setup","text":"<ol> <li>Clone the repo</li> <li>Setup and Activate your Virtual Environment</li> <li><code>bash    pip install pre-commit    pre-commit install</code></li> <li>Create your branch, develop your bug fix, feature or other contribution</li> <li>Open PR and a reviewer will approve your additions or request changes/</li> <li>Optionally, you may run <code>pre-commit run --all-files</code> to run checks manually before pushing your changes. </li> </ol>"},{"location":"CONTRIBUTING/","title":"Contributing to <code>warrior-bot</code>","text":"<p>Thank you for your interest in contributing to <code>warrior-bot</code>. This project is currently maintained by Stefan Barbu and supervised by Akrm Al-Hakimi.</p> <p>This guide will steer you through the typical process of contributing to any project, as well as some specifics to <code>warrior-bot</code>.</p>"},{"location":"CONTRIBUTING/#code-of-conduct","title":"Code of Conduct","text":"<p>All contributors are expected to follow our Code of Conduct. Keep interactions respectful and professional.</p> <p>Note: AI is fine and in some cases encouraged but we will outright reject any low effort, clearly slop code changes.  Please ensure you put effort into changes made to this project, even if you used AI to help write them.</p>"},{"location":"CONTRIBUTING/#pre-requisite-knowledge","title":"Pre-requisite Knowledge","text":"<p>While this project is welcoming to anyone curious or eager to be involved in a given project, it is still expected to  understand a short list of concepts/skills in order to comfortably contribute to <code>warrior-bot</code>.</p> <ul> <li>Basic programming concepts (Python and Shell are the only two languages that will be used in <code>warrior-bot</code> for now)</li> <li>You should know how to write for loops, if statements, conditionals, etc. </li> <li>Debugging is a non-starter. You should know how to setup your own environment, run your code, and make changes based off of the output of that code.</li> <li>You should know how to use an IDE and when working on <code>warrior-bot</code>, you should definitely get comfortable with using the terminal.</li> <li>Basic Git and Github knowledge </li> <li>You should know the following with little to no help:<ul> <li>Git</li> <li>How to clone a repository </li> <li>How to pull, push and rebase/fetch changes from a branch </li> <li>How to open a new branch and push it to the repo's upstream</li> <li>How to checkout branches</li> <li>How to commit changes and write clean commit messages (see Commit Messages)</li> <li>GitHub</li> <li>How to Open a PR (Pull Request) </li> <li>How to link a PR or Commit to an issue (Not mandatory, but helpful)</li> <li>How to submit an issue </li> </ul> </li> </ul> <p>These are skills I would probabaly expect a Sophomore/Junior to be comfortable with, but even if you aren't, it takes very little  discipline and time to learn them. Thus, why this project is open to developers of all experience levels.</p>"},{"location":"CONTRIBUTING/#how-to-contribute","title":"How to Contribute","text":"<p>You can contribute by: - Reporting bugs - Suggesting enhancements - Improving documentation - Submitting code changes</p> <p>Before starting work on an issue: 1. Check open issues 2. Comment on an issue to ask if it\u2019s available. 3. Wait for a maintainer to confirm or assign it.</p>"},{"location":"CONTRIBUTING/#setting-up-your-environment","title":"Setting Up Your Environment","text":"<ol> <li>Fork and clone the repository:    <code>bash    git clone https://github.com/&lt;your-username&gt;/warrior-bot.git    cd warrior-bot</code></li> <li>Create and activate a virtual environment:</li> </ol> <p><code>bash    python3 -m venv venv    source venv/bin/activate  # On Windows: venv\\Scripts\\activate</code> 3. Install dependencies:</p> <p><code>bash    pip install -e .    pip install -r requirements.txt</code> 4. Install pre-commit hooks -&gt; This is important for running checks automatically before pushing changes:</p> <p><code>bash    pip install pre-commit    pre-commit install</code>    - You can optionally decide to manually run checks using <code>pre-commit run --all-files</code></p>"},{"location":"CONTRIBUTING/#development-workflow","title":"Development Workflow","text":"<p>We use a simplified GitHub Flow:</p> <ol> <li>Create a new branch:</li> </ol> <p><code>bash    git checkout -b feature/short-title</code> 2. Make your changes; example:    ```python    # warrior_bot/cli.py</p> <p>import click</p> <p>@click.command()    def hello():      \"\"\"Simple test command\"\"\"      click.echo(\"Hello from Warrior-Bot!\")    <code>3. Test your changes</code>bash      warrior-bot hello      ``` 4. Commit with a clear message:</p> <p><code>bash    git commit -m \"feat: short summary of change\"</code> 5. Push your branch and open a pull request on GitHub to <code>master</code>.</p>"},{"location":"CONTRIBUTING/#style-and-quality-standards","title":"Style and Quality Standards","text":"<ul> <li>Follow PEP 8.</li> <li>Use <code>black</code> for formatting and <code>isort</code> for import order.</li> <li>Run <code>flake8</code> to check for style issues.</li> <li>Include docstrings for public functions and modules.</li> </ul> <p>These checks also run automatically via GitHub Actions and pre-commit. If you wanted to run them manually, you can use the following commands:</p> <pre><code>  black .            # runs formatting on all files \n  isort .            # sorts imports \n  flake8 warrior_bot # style checks \n</code></pre>"},{"location":"CONTRIBUTING/#testing","title":"Testing","text":"<p>Use <code>pytest</code> for testing:</p> <pre><code>pytest\n</code></pre> <p>All tests must pass before a pull request is merged. Any changes to a existing feature require that the tests still pass or new ones are made based on your changes.  Most new features require unit tests for any major components. </p>"},{"location":"CONTRIBUTING/#commit-messages","title":"Commit Messages","text":"<p>Use conventional commit types:</p> <ul> <li><code>feat:</code> for new features</li> <li><code>fix:</code> for bug fixes</li> <li><code>docs:</code> for documentation changes</li> <li><code>refactor:</code> for code improvements</li> <li><code>test:</code> for test-related updates</li> <li><code>chore:</code> for maintenance or config updates</li> </ul> <p>Example:</p> <pre><code>feat: add campus events command\n</code></pre>"},{"location":"CONTRIBUTING/#pull-requests","title":"Pull Requests","text":"<p>Pull requests should:</p> <ul> <li>Target the <code>master</code> branch.</li> <li>Pass all linting and test checks.</li> <li>Contain clear, descriptive commit messages.</li> <li>Be scoped to a single feature or fix.</li> </ul> <p>Maintainers will review PRs and may request changes before merging.</p>"},{"location":"CONTRIBUTING/#getting-help","title":"Getting Help","text":"<p>If you need help:</p> <ul> <li>Open a issue on GitHub or contact the maintainers directly (Stefan Barbu and Akrm Al-Hakimi).</li> <li>Utilize your own resources to teach yourself any processses or concepts you aren't familiar with.</li> </ul>"}]}